require 'logger'
require 'telegram/bot'
require 'nokogiri'
require 'open-uri'
require 'uri'
require 'cgi'
require 'selenium-webdriver'
require 'timeout'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = File.read('.token').chomp.freeze

# –ë–∞–∑–æ–≤—ã–π URL —Å–∞–π—Ç–∞ –∫–æ–ª–ª–µ–¥–∂–∞
BASE_URL = 'https://mnokol.tyuiu.ru'.freeze

$logger = Logger.new $stderr

# –ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
class ScheduleParser
  def initialize
    @departments = {}
    @group_schedules = {}
    @user_context = {} # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  end
  attr_reader :user_context

  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–¥–µ–ª–µ–Ω–∏–π
  def fetch_departments
    $logger.info "Fetching departaments..."

    url = "#{BASE_URL}/site/index.php?option=com_content&view=article&id=1582&Itemid=247"
    doc = Nokogiri::HTML(URI.open(url))

    doc.css('ul.mod-menu li.col-lg.col-md-6 a').each do |link| # Add classes .col-lg and .col-md-6 to li
      department_name = link.text.strip
      department_url = link['href'].gsub('&amp;', '&')
      @departments[department_name] = "#{BASE_URL}#{department_url}"
    end

    @departments
  rescue => e
    $logger.error "Error fetching departments: #{e.message}"
    {}
  end

  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –æ—Ç–¥–µ–ª–µ–Ω–∏—è
  def fetch_groups(department_url)
    $logger.info "Fetching groups for #{department_url}"

    options = Selenium::WebDriver::Chrome::Options.new
    options.add_argument('--headless')
    options.add_argument('--disable-gpu')
    options.add_argument('--no-sandbox')
    options.add_argument("--user-data-dir=/tmp/chrome_profile_#{rand(10000)}")

    driver = Selenium::WebDriver.for(:chrome, options: options)
    begin
      driver.navigate.to(department_url)
      wait = Selenium::WebDriver::Wait.new(timeout: 20)

      # Switch to iframe
      iframe = wait.until { driver.find_element(:css, 'div.com-content-article__body iframe') }
      driver.switch_to.frame(iframe)

      # Wait for groups select
      select = wait.until { driver.find_element(:id, 'groups') }
      groups = {}

      select.find_elements(:tag_name, 'option').each do |option|
        next if option['value'] == '0' # Skip placeholder
        groups[option.text.strip] = option['value']
      end

      groups
    rescue => e
      $logger.error "Error fetching groups: #{e.message}"
      {}
    ensure
      driver.quit if driver
    end
  end

  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
  def fetch_schedule(department_url, group_id)
    $logger.info "Fetching schedule for group #{group_id}..."

    begin
      options = Selenium::WebDriver::Chrome::Options.new
      options.add_argument('--headless')
      options.add_argument('--disable-gpu')
      options.add_argument('--no-sandbox')
      options.add_argument('--disable-dev-shm-usage')
      options.add_argument("--user-data-dir=/tmp/chrome_#{rand(10000)}")

      driver = Selenium::WebDriver.for(:chrome, options: options)

      driver.navigate.to(department_url)
      wait = Selenium::WebDriver::Wait.new(timeout: 20)

      # Switch to iframe
      iframe = wait.until { driver.find_element(:css, 'div.com-content-article__body iframe') }
      driver.switch_to.frame(iframe)

      # Select group
      select = wait.until { driver.find_element(:id, 'groups') }
      Selenium::WebDriver::Support::Select.new(select).select_by(:value, group_id)

      # Click show button
      driver.find_element(:id, 'click_to_show').click

      # Get schedule
      schedule = wait.until { driver.find_element(:id, 'main_table') }.text

      schedule.empty? ? "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" : schedule
    rescue Selenium::WebDriver::Error::TimeoutError => e
      $logger.error "Timeout error: #{e.message}"
      "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
    rescue => e
      $logger.error "Error fetching schedule: #{e.message}"
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
    ensure
      driver.quit if defined?(driver) && driver
    end
  end

  private

  # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
  def example_schedule(department_url, group_id)
    schedule = []
    schedule << "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã #{group_id}"
    schedule << "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:"
    schedule << "1. 08:00-09:35 - –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–∞—É–¥. 101)"
    schedule << "2. 09:45-11:20 - –§–∏–∑–∏–∫–∞ (–∞—É–¥. 205)"
    schedule << ""
    schedule << "–í—Ç–æ—Ä–Ω–∏–∫:"
    schedule << "3. 11:30-13:05 - –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–∞—É–¥. 310)"
    schedule << "4. 13:45-15:20 - –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∞—É–¥. 215)"

    schedule.join("\n")
  end
end

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞
parser = ScheduleParser.new

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
$logger.info "Starting bot..."

Telegram::Bot::Client.run(TOKEN) do |bot|
  bot.listen do |message|
    begin
      $logger.debug "Received: #{message.text}"

      case message.text
      when '/start'
        bot.api.send_message(
          chat_id: message.chat.id,
          text: "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /departments —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å"
        )

      when '/departments'
        departments = parser.fetch_departments
        if departments.any?
          # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ
          keyboard = departments.keys.each_slice(2).map do |pair|
            pair.map { |department| { text: department } }
          end

          markup = {
            keyboard: keyboard,
            resize_keyboard: true,
            one_time_keyboard: true
          }

          bot.api.send_message(
            chat_id: message.chat.id,
            text: "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:",
            reply_markup: JSON.dump(markup)
          )
        else
          bot.api.send_message(
            chat_id: message.chat.id,
            text: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–¥–µ–ª–µ–Ω–∏—è"
          )
        end
      else
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è
        departments = parser.fetch_departments
        if departments.key?(message.text)
          parser.user_context[message.chat.id] = {
            department: message.text,
            department_url: departments[message.text]
          }

          groups = parser.fetch_groups(departments[message.text])
          if groups.any?
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏ (–ø–æ 1 –≤ —Ä—è–¥)
            keyboard = groups.keys.map { |group| [group] }

            bot.api.send_message(
              chat_id: message.chat.id,
              text: "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
              reply_markup: {
                keyboard: keyboard,
                resize_keyboard: true,
                one_time_keyboard: true
              }.to_json
            )
          else
            bot.api.send_message(
              chat_id: message.chat.id,
              text: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–¥–µ–ª–µ–Ω–∏—è"
            )
          end

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        elsif parser.user_context[message.chat.id]
          context = parser.user_context[message.chat.id]

          bot.api.send_message(
            chat_id: message.chat.id,
            text: "–ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
          )

          schedule = parser.fetch_schedule(context[:department_url], message.text)
          bot.api.send_message(
            chat_id: message.chat.id,
            text: schedule || "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
          )

          # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
          parser.user_context.delete(message.chat.id)
        else
          bot.api.send_message(
            chat_id: message.chat.id,
            text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /departments"
          )
        end
      end
    rescue => e
      $logger.error "Error: #{e.message}"
      bot.api.send_message(
        chat_id: message.chat.id,
        text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      )
    end
  end
end
